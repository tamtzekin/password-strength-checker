{"version":3,"sources":["PasswordStrengthMeter.js","App.js","serviceWorker.js","index.js"],"names":["PasswordStrengthMeter","createPasswordLabel","result","score","password","this","props","testedResult","zxcvbn","react_default","a","createElement","className","concat","value","max","Fragment","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","autoComplete","type","onChange","e","setState","target","src_PasswordStrengthMeter_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAmDeA,oNAlBXC,oBAAsB,SAAAC,GAClB,OAAQA,EAAOC,OACX,KAAK,EAEL,KAAK,EACD,MAAO,OACX,KAAK,EACD,MAAO,UACX,KAAK,EACD,MAAO,OACX,KAAK,EACD,MAAO,SACX,QACI,MAAO,qFAxCV,IACGC,EAAaC,KAAKC,MAAlBF,SACFG,EAAeC,IAAOJ,GAC5B,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,YACIC,UAAS,6CAAAC,OAA+CR,KAAKJ,oBACzDM,IAEJO,MAAOP,EAAaJ,MACpBY,IAAI,MAERN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iCACZR,GACGK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACIP,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,cACKN,KAAKJ,oBAAoBM,cAnBtBU,cCwBrBC,cA1BX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,QACKoB,MAAQ,CACTrB,SAAU,IAHJe,wEAOL,IAAAO,EAAArB,KACGD,EAAaC,KAAKoB,MAAlBrB,SACR,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,SACIgB,aAAa,MACbC,KAAK,WACLC,SAAU,SAAAC,GAAC,OACPJ,EAAKK,SAAS,CAAE3B,SAAU0B,EAAEE,OAAOlB,WAG3CL,EAAAC,EAAAC,cAACsB,EAAD,CAAuB7B,SAAUA,aApBnCa,aCUEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ecebe86c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./PasswordStrengthMeter.css\";\nimport zxcvbn from \"zxcvbn\";\nimport { timeout } from \"q\";\n\nclass PasswordStrengthMeter extends Component {\n    render() {\n        const { password } = this.props;\n        const testedResult = zxcvbn(password);\n        return (\n            <div className=\"password-strength-meter\">\n                <progress\n                    className={`password-strength-meter-progress strength-${this.createPasswordLabel(\n                        testedResult\n                    )}`}\n                    value={testedResult.score}\n                    max=\"4\"\n                />\n                <br />\n                <label className=\"password-strength-meter-label\">\n                    {password && (\n                        <>\n                            <em>Your password is: </em>\n                            <strong>\n                                {this.createPasswordLabel(testedResult)}\n                            </strong>\n                        </>\n                    )}\n                </label>\n            </div>\n        );\n    }\n\n    createPasswordLabel = result => {\n        switch (result.score) {\n            case 0:\n                return \"weak\";\n            case 1:\n                return \"weak\";\n            case 2:\n                return \"average\";\n            case 3:\n                return \"good\";\n            case 4:\n                return \"strong\";\n            default:\n                return \"too weak\";\n        }\n    };\n}\n\nexport default PasswordStrengthMeter;\n","import React, { Component } from \"react\";\nimport PasswordStrengthMeter from \"./PasswordStrengthMeter\";\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            password: \"\",\n        };\n    }\n\n    render() {\n        const { password } = this.state;\n        return (\n            <div className=\"App\">\n                <div className=\"meter\">\n                    <input\n                        autoComplete=\"off\"\n                        type=\"password\"\n                        onChange={e =>\n                            this.setState({ password: e.target.value })\n                        }\n                    />\n                    <PasswordStrengthMeter password={password} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}